/**
 * @fileoverview added by tsickle
 * Generated from: src/utils.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { from, throwError, of } from 'rxjs';
import { map, catchError, shareReplay } from 'rxjs/operators';
/**
 * @param {?} animation
 * @return {?}
 */
export function transformAnimationFilenameToKey(animation) {
    return "animation-" + animation.split('.json')[0];
}
/**
 * @param {?} options
 * @param {?} container
 * @param {?} animationCache
 * @return {?}
 */
export function mergeOptionsWithDefault(options, container, animationCache) {
    /** @type {?} */
    var merged = Object.assign({
        container: container,
        renderer: 'svg',
        loop: true,
        autoplay: true,
    }, options);
    if (animationCache !== null) {
        return animationCache.transformOptions(merged);
    }
    return merged;
}
/**
 * @param {?} options
 * @return {?}
 */
export function isAnimationConfigWithData(options) {
    /** @type {?} */
    var animationData = ((/** @type {?} */ (options))).animationData;
    return animationData !== null && typeof animationData === 'object';
}
/**
 * @param {?} animationCache
 * @param {?} options
 * @param {?} animationItem
 * @return {?}
 */
export function awaitConfigAndCache(animationCache, options, animationItem) {
    if (animationCache === null) {
        return;
    }
    animationItem.addEventListener('config_ready', (/**
     * @return {?}
     */
    function () {
        animationCache.set(options, animationItem);
    }));
}
/**
 * @param {?} player
 * @return {?}
 */
export function streamifyPlayerOrLoader(player) {
    /** @type {?} */
    var playerOrLoader = player();
    if (playerOrLoader instanceof Promise) {
        return from(playerOrLoader).pipe(map((/**
         * @param {?} module
         * @return {?}
         */
        function (module) { return module.default || module; })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            console.error("\n          Could not retrieve the \"lottie-web\" player, did you provide\n          the \"player\" property correctly?\n          export function playerFactory() {\n            return import('lottie-web');\n          }\n          LottieModule.forRoot({ player: playerFactory })\n        ");
            return throwError(error);
        })), shareReplay(1));
    }
    return of(playerOrLoader);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtbG90dGllLyIsInNvdXJjZXMiOlsic3JjL3V0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsRUFBRSxFQUFjLE1BQU0sTUFBTSxDQUFDO0FBQ3hELE9BQU8sRUFBRSxHQUFHLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDOzs7OztBQWE5RCxNQUFNLFVBQVUsK0JBQStCLENBQUMsU0FBNEI7SUFDMUUsT0FBTyxlQUFhLFNBQVMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFHLENBQUM7QUFDcEQsQ0FBQzs7Ozs7OztBQUVELE1BQU0sVUFBVSx1QkFBdUIsQ0FDckMsT0FBZ0MsRUFDaEMsU0FBc0IsRUFDdEIsY0FBcUM7O1FBRS9CLE1BQU0sR0FBc0QsTUFBTSxDQUFDLE1BQU0sQ0FDN0U7UUFDRSxTQUFTLFdBQUE7UUFDVCxRQUFRLEVBQUUsS0FBSztRQUNmLElBQUksRUFBRSxJQUFJO1FBQ1YsUUFBUSxFQUFFLElBQUk7S0FDZixFQUNELE9BQU8sQ0FDUjtJQUVELElBQUksY0FBYyxLQUFLLElBQUksRUFBRTtRQUMzQixPQUFPLGNBQWMsQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztLQUNoRDtJQUVELE9BQU8sTUFBTSxDQUFDO0FBQ2hCLENBQUM7Ozs7O0FBRUQsTUFBTSxVQUFVLHlCQUF5QixDQUN2QyxPQUEwRDs7UUFFcEQsYUFBYSxHQUFHLENBQUMsbUJBQUEsT0FBTyxFQUEyQixDQUFDLENBQUMsYUFBYTtJQUN4RSxPQUFPLGFBQWEsS0FBSyxJQUFJLElBQUksT0FBTyxhQUFhLEtBQUssUUFBUSxDQUFDO0FBQ3JFLENBQUM7Ozs7Ozs7QUFFRCxNQUFNLFVBQVUsbUJBQW1CLENBQ2pDLGNBQXFDLEVBQ3JDLE9BQTBELEVBQzFELGFBQTRCO0lBRTVCLElBQUksY0FBYyxLQUFLLElBQUksRUFBRTtRQUMzQixPQUFPO0tBQ1I7SUFFRCxhQUFhLENBQUMsZ0JBQWdCLENBQUMsY0FBYzs7O0lBQUU7UUFDN0MsY0FBYyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsYUFBYSxDQUFDLENBQUM7SUFDN0MsQ0FBQyxFQUFDLENBQUM7QUFDTCxDQUFDOzs7OztBQUVELE1BQU0sVUFBVSx1QkFBdUIsQ0FDckMsTUFBbUM7O1FBRTdCLGNBQWMsR0FBRyxNQUFNLEVBQUU7SUFFL0IsSUFBSSxjQUFjLFlBQVksT0FBTyxFQUFFO1FBQ3JDLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLElBQUksQ0FDOUIsR0FBRzs7OztRQUFDLFVBQUEsTUFBTSxJQUFJLE9BQUEsTUFBTSxDQUFDLE9BQU8sSUFBSSxNQUFNLEVBQXhCLENBQXdCLEVBQUMsRUFDdkMsVUFBVTs7OztRQUFDLFVBQUEsS0FBSztZQUNkLE9BQU8sQ0FBQyxLQUFLLENBQUMsa1NBT2IsQ0FBQyxDQUFDO1lBQ0gsT0FBTyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDM0IsQ0FBQyxFQUFDLEVBQ0YsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUNmLENBQUM7S0FDSDtJQUVELE9BQU8sRUFBRSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0FBQzVCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBmcm9tLCB0aHJvd0Vycm9yLCBvZiwgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbWFwLCBjYXRjaEVycm9yLCBzaGFyZVJlcGxheSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW1wb3J0IHtcbiAgTG90dGllUGxheWVyLFxuICBBbmltYXRpb25PcHRpb25zLFxuICBBbmltYXRpb25GaWxlbmFtZSxcbiAgQW5pbWF0aW9uQ29uZmlnV2l0aERhdGEsXG4gIEFuaW1hdGlvbkNvbmZpZ1dpdGhQYXRoLFxuICBBbmltYXRpb25JdGVtLFxuICBMb3R0aWVQbGF5ZXJGYWN0b3J5T3JMb2FkZXIsXG59IGZyb20gJy4vc3ltYm9scyc7XG5pbXBvcnQgeyBBbmltYXRpb25DYWNoZSB9IGZyb20gJy4vYW5pbWF0aW9uLWNhY2hlJztcblxuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zZm9ybUFuaW1hdGlvbkZpbGVuYW1lVG9LZXkoYW5pbWF0aW9uOiBBbmltYXRpb25GaWxlbmFtZSk6IHN0cmluZyB7XG4gIHJldHVybiBgYW5pbWF0aW9uLSR7YW5pbWF0aW9uLnNwbGl0KCcuanNvbicpWzBdfWA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtZXJnZU9wdGlvbnNXaXRoRGVmYXVsdChcbiAgb3B0aW9uczogQW5pbWF0aW9uT3B0aW9ucyB8IG51bGwsXG4gIGNvbnRhaW5lcjogSFRNTEVsZW1lbnQsXG4gIGFuaW1hdGlvbkNhY2hlOiBBbmltYXRpb25DYWNoZSB8IG51bGwsXG4pOiBBbmltYXRpb25Db25maWdXaXRoRGF0YSB8IEFuaW1hdGlvbkNvbmZpZ1dpdGhQYXRoIHtcbiAgY29uc3QgbWVyZ2VkOiBBbmltYXRpb25Db25maWdXaXRoRGF0YSB8IEFuaW1hdGlvbkNvbmZpZ1dpdGhQYXRoID0gT2JqZWN0LmFzc2lnbihcbiAgICB7XG4gICAgICBjb250YWluZXIsXG4gICAgICByZW5kZXJlcjogJ3N2ZycsXG4gICAgICBsb29wOiB0cnVlLFxuICAgICAgYXV0b3BsYXk6IHRydWUsXG4gICAgfSxcbiAgICBvcHRpb25zLFxuICApO1xuXG4gIGlmIChhbmltYXRpb25DYWNoZSAhPT0gbnVsbCkge1xuICAgIHJldHVybiBhbmltYXRpb25DYWNoZS50cmFuc2Zvcm1PcHRpb25zKG1lcmdlZCk7XG4gIH1cblxuICByZXR1cm4gbWVyZ2VkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNBbmltYXRpb25Db25maWdXaXRoRGF0YShcbiAgb3B0aW9uczogQW5pbWF0aW9uQ29uZmlnV2l0aFBhdGggfCBBbmltYXRpb25Db25maWdXaXRoRGF0YSxcbik6IG9wdGlvbnMgaXMgQW5pbWF0aW9uQ29uZmlnV2l0aERhdGEge1xuICBjb25zdCBhbmltYXRpb25EYXRhID0gKG9wdGlvbnMgYXMgQW5pbWF0aW9uQ29uZmlnV2l0aERhdGEpLmFuaW1hdGlvbkRhdGE7XG4gIHJldHVybiBhbmltYXRpb25EYXRhICE9PSBudWxsICYmIHR5cGVvZiBhbmltYXRpb25EYXRhID09PSAnb2JqZWN0Jztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGF3YWl0Q29uZmlnQW5kQ2FjaGUoXG4gIGFuaW1hdGlvbkNhY2hlOiBBbmltYXRpb25DYWNoZSB8IG51bGwsXG4gIG9wdGlvbnM6IEFuaW1hdGlvbkNvbmZpZ1dpdGhQYXRoIHwgQW5pbWF0aW9uQ29uZmlnV2l0aERhdGEsXG4gIGFuaW1hdGlvbkl0ZW06IEFuaW1hdGlvbkl0ZW0sXG4pOiB2b2lkIHtcbiAgaWYgKGFuaW1hdGlvbkNhY2hlID09PSBudWxsKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgYW5pbWF0aW9uSXRlbS5hZGRFdmVudExpc3RlbmVyKCdjb25maWdfcmVhZHknLCAoKSA9PiB7XG4gICAgYW5pbWF0aW9uQ2FjaGUuc2V0KG9wdGlvbnMsIGFuaW1hdGlvbkl0ZW0pO1xuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN0cmVhbWlmeVBsYXllck9yTG9hZGVyKFxuICBwbGF5ZXI6IExvdHRpZVBsYXllckZhY3RvcnlPckxvYWRlcixcbik6IE9ic2VydmFibGU8TG90dGllUGxheWVyPiB7XG4gIGNvbnN0IHBsYXllck9yTG9hZGVyID0gcGxheWVyKCk7XG5cbiAgaWYgKHBsYXllck9yTG9hZGVyIGluc3RhbmNlb2YgUHJvbWlzZSkge1xuICAgIHJldHVybiBmcm9tKHBsYXllck9yTG9hZGVyKS5waXBlKFxuICAgICAgbWFwKG1vZHVsZSA9PiBtb2R1bGUuZGVmYXVsdCB8fCBtb2R1bGUpLFxuICAgICAgY2F0Y2hFcnJvcihlcnJvciA9PiB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYFxuICAgICAgICAgIENvdWxkIG5vdCByZXRyaWV2ZSB0aGUgXCJsb3R0aWUtd2ViXCIgcGxheWVyLCBkaWQgeW91IHByb3ZpZGVcbiAgICAgICAgICB0aGUgXCJwbGF5ZXJcIiBwcm9wZXJ0eSBjb3JyZWN0bHk/XG4gICAgICAgICAgZXhwb3J0IGZ1bmN0aW9uIHBsYXllckZhY3RvcnkoKSB7XG4gICAgICAgICAgICByZXR1cm4gaW1wb3J0KCdsb3R0aWUtd2ViJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIExvdHRpZU1vZHVsZS5mb3JSb290KHsgcGxheWVyOiBwbGF5ZXJGYWN0b3J5IH0pXG4gICAgICAgIGApO1xuICAgICAgICByZXR1cm4gdGhyb3dFcnJvcihlcnJvcik7XG4gICAgICB9KSxcbiAgICAgIHNoYXJlUmVwbGF5KDEpLFxuICAgICk7XG4gIH1cblxuICByZXR1cm4gb2YocGxheWVyT3JMb2FkZXIpO1xufVxuIl19