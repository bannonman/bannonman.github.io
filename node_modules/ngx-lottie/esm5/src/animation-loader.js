/**
 * @fileoverview added by tsickle
 * Generated from: src/animation-loader.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, NgZone, Inject, PLATFORM_ID } from '@angular/core';
import { isPlatformServer } from '@angular/common';
import { takeUntil } from 'rxjs/operators';
import { LOTTIE_OPTIONS, ANIMATION_CACHE, } from './symbols';
import { awaitConfigAndCache, mergeOptionsWithDefault, streamifyPlayerOrLoader } from './utils';
var AnimationLoader = /** @class */ (function () {
    function AnimationLoader(ngZone, platformId, options, animationCache) {
        this.ngZone = ngZone;
        this.platformId = platformId;
        this.options = options;
        this.animationCache = animationCache;
        this.player$ = streamifyPlayerOrLoader(this.options.player);
    }
    /**
     * @param {?} options
     * @param {?} container
     * @param {?} eventsFacade
     * @param {?} animationCreated
     * @param {?} instance
     * @param {?} destroy$
     * @return {?}
     */
    AnimationLoader.prototype.resolveLoaderAndLoadAnimation = /**
     * @param {?} options
     * @param {?} container
     * @param {?} eventsFacade
     * @param {?} animationCreated
     * @param {?} instance
     * @param {?} destroy$
     * @return {?}
     */
    function (options, container, eventsFacade, animationCreated, instance, destroy$) {
        var _this = this;
        if (isPlatformServer(this.platformId)) {
            return;
        }
        this.player$.pipe(takeUntil(destroy$)).subscribe((/**
         * @param {?} player
         * @return {?}
         */
        function (player) {
            /** @type {?} */
            var mergedOptions = mergeOptionsWithDefault(options, container, _this.animationCache);
            _this.loadAnimation(player, mergedOptions, eventsFacade, animationCreated, instance);
        }));
    };
    /**
     * @private
     * @param {?} player
     * @param {?} options
     * @param {?} eventsFacade
     * @param {?} animationCreated
     * @param {?} instance
     * @return {?}
     */
    AnimationLoader.prototype.loadAnimation = /**
     * @private
     * @param {?} player
     * @param {?} options
     * @param {?} eventsFacade
     * @param {?} animationCreated
     * @param {?} instance
     * @return {?}
     */
    function (player, options, eventsFacade, animationCreated, instance) {
        /** @type {?} */
        var animationItem = this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        function () { return player.loadAnimation(options); }));
        awaitConfigAndCache(this.animationCache, options, animationItem);
        // Dispatch `animationCreated` event after animation is loaded successfully
        animationCreated.emit(animationItem);
        eventsFacade.addEventListeners(instance, animationItem);
    };
    AnimationLoader.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    AnimationLoader.ctorParameters = function () { return [
        { type: NgZone },
        { type: String, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [LOTTIE_OPTIONS,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [ANIMATION_CACHE,] }] }
    ]; };
    return AnimationLoader;
}());
export { AnimationLoader };
if (false) {
    /**
     * @type {?}
     * @private
     */
    AnimationLoader.prototype.player$;
    /**
     * @type {?}
     * @private
     */
    AnimationLoader.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    AnimationLoader.prototype.platformId;
    /**
     * @type {?}
     * @private
     */
    AnimationLoader.prototype.options;
    /**
     * @type {?}
     * @private
     */
    AnimationLoader.prototype.animationCache;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5pbWF0aW9uLWxvYWRlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1sb3R0aWUvIiwic291cmNlcyI6WyJzcmMvYW5pbWF0aW9uLWxvYWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBZ0IsV0FBVyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3RGLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBR25ELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUUzQyxPQUFPLEVBT0wsY0FBYyxFQUNkLGVBQWUsR0FDaEIsTUFBTSxXQUFXLENBQUM7QUFDbkIsT0FBTyxFQUFFLG1CQUFtQixFQUFFLHVCQUF1QixFQUFFLHVCQUF1QixFQUFFLE1BQU0sU0FBUyxDQUFDO0FBS2hHO0lBSUUseUJBQ1UsTUFBYyxFQUNPLFVBQWtCLEVBQ2YsT0FBc0IsRUFDckIsY0FBcUM7UUFIOUQsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUNPLGVBQVUsR0FBVixVQUFVLENBQVE7UUFDZixZQUFPLEdBQVAsT0FBTyxDQUFlO1FBQ3JCLG1CQUFjLEdBQWQsY0FBYyxDQUF1QjtRQU5oRSxZQUFPLEdBQUcsdUJBQXVCLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztJQU81RCxDQUFDOzs7Ozs7Ozs7O0lBRUosdURBQTZCOzs7Ozs7Ozs7SUFBN0IsVUFDRSxPQUFnQyxFQUNoQyxTQUFzQixFQUN0QixZQUFnQyxFQUNoQyxnQkFBNkMsRUFDN0MsUUFBdUIsRUFDdkIsUUFBdUI7UUFOekIsaUJBZ0JDO1FBUkMsSUFBSSxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEVBQUU7WUFDckMsT0FBTztTQUNSO1FBRUQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsU0FBUzs7OztRQUFDLFVBQUEsTUFBTTs7Z0JBQy9DLGFBQWEsR0FBRyx1QkFBdUIsQ0FBQyxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUksQ0FBQyxjQUFjLENBQUM7WUFDdEYsS0FBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLEVBQUUsYUFBYSxFQUFFLFlBQVksRUFBRSxnQkFBZ0IsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUN0RixDQUFDLEVBQUMsQ0FBQztJQUNMLENBQUM7Ozs7Ozs7Ozs7SUFFTyx1Q0FBYTs7Ozs7Ozs7O0lBQXJCLFVBQ0UsTUFBb0IsRUFDcEIsT0FBMEQsRUFDMUQsWUFBZ0MsRUFDaEMsZ0JBQTZDLEVBQzdDLFFBQXVCOztZQUVqQixhQUFhLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxpQkFBaUI7OztRQUFDLGNBQU0sT0FBQSxNQUFNLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxFQUE3QixDQUE2QixFQUFDO1FBQ3hGLG1CQUFtQixDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsT0FBTyxFQUFFLGFBQWEsQ0FBQyxDQUFDO1FBQ2pFLDJFQUEyRTtRQUMzRSxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDckMsWUFBWSxDQUFDLGlCQUFpQixDQUFDLFFBQVEsRUFBRSxhQUFhLENBQUMsQ0FBQztJQUMxRCxDQUFDOztnQkF6Q0YsVUFBVTs7OztnQkFyQlUsTUFBTTs2Q0EyQnRCLE1BQU0sU0FBQyxXQUFXO2dEQUNsQixNQUFNLFNBQUMsY0FBYztnREFDckIsTUFBTSxTQUFDLGVBQWU7O0lBa0MzQixzQkFBQztDQUFBLEFBMUNELElBMENDO1NBekNZLGVBQWU7Ozs7OztJQUMxQixrQ0FBK0Q7Ozs7O0lBRzdELGlDQUFzQjs7Ozs7SUFDdEIscUNBQStDOzs7OztJQUMvQyxrQ0FBc0Q7Ozs7O0lBQ3RELHlDQUFzRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIE5nWm9uZSwgSW5qZWN0LCBFdmVudEVtaXR0ZXIsIFBMQVRGT1JNX0lEIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBpc1BsYXRmb3JtU2VydmVyIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcblxuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgdGFrZVVudGlsIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQge1xuICBMb3R0aWVQbGF5ZXIsXG4gIExvdHRpZU9wdGlvbnMsXG4gIEFuaW1hdGlvbkl0ZW0sXG4gIEFuaW1hdGlvbk9wdGlvbnMsXG4gIEFuaW1hdGlvbkNvbmZpZ1dpdGhEYXRhLFxuICBBbmltYXRpb25Db25maWdXaXRoUGF0aCxcbiAgTE9UVElFX09QVElPTlMsXG4gIEFOSU1BVElPTl9DQUNIRSxcbn0gZnJvbSAnLi9zeW1ib2xzJztcbmltcG9ydCB7IGF3YWl0Q29uZmlnQW5kQ2FjaGUsIG1lcmdlT3B0aW9uc1dpdGhEZWZhdWx0LCBzdHJlYW1pZnlQbGF5ZXJPckxvYWRlciB9IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IHsgQmFzZURpcmVjdGl2ZSB9IGZyb20gJy4vYmFzZS5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgQW5pbWF0aW9uQ2FjaGUgfSBmcm9tICcuL2FuaW1hdGlvbi1jYWNoZSc7XG5pbXBvcnQgeyBMb3R0aWVFdmVudHNGYWNhZGUgfSBmcm9tICcuL2V2ZW50cy1mYWNhZGUnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQW5pbWF0aW9uTG9hZGVyIHtcbiAgcHJpdmF0ZSBwbGF5ZXIkID0gc3RyZWFtaWZ5UGxheWVyT3JMb2FkZXIodGhpcy5vcHRpb25zLnBsYXllcik7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBuZ1pvbmU6IE5nWm9uZSxcbiAgICBASW5qZWN0KFBMQVRGT1JNX0lEKSBwcml2YXRlIHBsYXRmb3JtSWQ6IHN0cmluZyxcbiAgICBASW5qZWN0KExPVFRJRV9PUFRJT05TKSBwcml2YXRlIG9wdGlvbnM6IExvdHRpZU9wdGlvbnMsXG4gICAgQEluamVjdChBTklNQVRJT05fQ0FDSEUpIHByaXZhdGUgYW5pbWF0aW9uQ2FjaGU6IEFuaW1hdGlvbkNhY2hlIHwgbnVsbCxcbiAgKSB7fVxuXG4gIHJlc29sdmVMb2FkZXJBbmRMb2FkQW5pbWF0aW9uKFxuICAgIG9wdGlvbnM6IEFuaW1hdGlvbk9wdGlvbnMgfCBudWxsLFxuICAgIGNvbnRhaW5lcjogSFRNTEVsZW1lbnQsXG4gICAgZXZlbnRzRmFjYWRlOiBMb3R0aWVFdmVudHNGYWNhZGUsXG4gICAgYW5pbWF0aW9uQ3JlYXRlZDogRXZlbnRFbWl0dGVyPEFuaW1hdGlvbkl0ZW0+LFxuICAgIGluc3RhbmNlOiBCYXNlRGlyZWN0aXZlLFxuICAgIGRlc3Ryb3kkOiBTdWJqZWN0PHZvaWQ+LFxuICApIHtcbiAgICBpZiAoaXNQbGF0Zm9ybVNlcnZlcih0aGlzLnBsYXRmb3JtSWQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5wbGF5ZXIkLnBpcGUodGFrZVVudGlsKGRlc3Ryb3kkKSkuc3Vic2NyaWJlKHBsYXllciA9PiB7XG4gICAgICBjb25zdCBtZXJnZWRPcHRpb25zID0gbWVyZ2VPcHRpb25zV2l0aERlZmF1bHQob3B0aW9ucywgY29udGFpbmVyLCB0aGlzLmFuaW1hdGlvbkNhY2hlKTtcbiAgICAgIHRoaXMubG9hZEFuaW1hdGlvbihwbGF5ZXIsIG1lcmdlZE9wdGlvbnMsIGV2ZW50c0ZhY2FkZSwgYW5pbWF0aW9uQ3JlYXRlZCwgaW5zdGFuY2UpO1xuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBsb2FkQW5pbWF0aW9uKFxuICAgIHBsYXllcjogTG90dGllUGxheWVyLFxuICAgIG9wdGlvbnM6IEFuaW1hdGlvbkNvbmZpZ1dpdGhEYXRhIHwgQW5pbWF0aW9uQ29uZmlnV2l0aFBhdGgsXG4gICAgZXZlbnRzRmFjYWRlOiBMb3R0aWVFdmVudHNGYWNhZGUsXG4gICAgYW5pbWF0aW9uQ3JlYXRlZDogRXZlbnRFbWl0dGVyPEFuaW1hdGlvbkl0ZW0+LFxuICAgIGluc3RhbmNlOiBCYXNlRGlyZWN0aXZlLFxuICApOiB2b2lkIHtcbiAgICBjb25zdCBhbmltYXRpb25JdGVtID0gdGhpcy5uZ1pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4gcGxheWVyLmxvYWRBbmltYXRpb24ob3B0aW9ucykpO1xuICAgIGF3YWl0Q29uZmlnQW5kQ2FjaGUodGhpcy5hbmltYXRpb25DYWNoZSwgb3B0aW9ucywgYW5pbWF0aW9uSXRlbSk7XG4gICAgLy8gRGlzcGF0Y2ggYGFuaW1hdGlvbkNyZWF0ZWRgIGV2ZW50IGFmdGVyIGFuaW1hdGlvbiBpcyBsb2FkZWQgc3VjY2Vzc2Z1bGx5XG4gICAgYW5pbWF0aW9uQ3JlYXRlZC5lbWl0KGFuaW1hdGlvbkl0ZW0pO1xuICAgIGV2ZW50c0ZhY2FkZS5hZGRFdmVudExpc3RlbmVycyhpbnN0YW5jZSwgYW5pbWF0aW9uSXRlbSk7XG4gIH1cbn1cbiJdfQ==