/**
 * @fileoverview added by tsickle
 * Generated from: src/animation-loader.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, NgZone, Inject, PLATFORM_ID } from '@angular/core';
import { isPlatformServer } from '@angular/common';
import { takeUntil } from 'rxjs/operators';
import { LOTTIE_OPTIONS, ANIMATION_CACHE, } from './symbols';
import { awaitConfigAndCache, mergeOptionsWithDefault, streamifyPlayerOrLoader } from './utils';
export class AnimationLoader {
    /**
     * @param {?} ngZone
     * @param {?} platformId
     * @param {?} options
     * @param {?} animationCache
     */
    constructor(ngZone, platformId, options, animationCache) {
        this.ngZone = ngZone;
        this.platformId = platformId;
        this.options = options;
        this.animationCache = animationCache;
        this.player$ = streamifyPlayerOrLoader(this.options.player);
    }
    /**
     * @param {?} options
     * @param {?} container
     * @param {?} eventsFacade
     * @param {?} animationCreated
     * @param {?} instance
     * @param {?} destroy$
     * @return {?}
     */
    resolveLoaderAndLoadAnimation(options, container, eventsFacade, animationCreated, instance, destroy$) {
        if (isPlatformServer(this.platformId)) {
            return;
        }
        this.player$.pipe(takeUntil(destroy$)).subscribe((/**
         * @param {?} player
         * @return {?}
         */
        player => {
            /** @type {?} */
            const mergedOptions = mergeOptionsWithDefault(options, container, this.animationCache);
            this.loadAnimation(player, mergedOptions, eventsFacade, animationCreated, instance);
        }));
    }
    /**
     * @private
     * @param {?} player
     * @param {?} options
     * @param {?} eventsFacade
     * @param {?} animationCreated
     * @param {?} instance
     * @return {?}
     */
    loadAnimation(player, options, eventsFacade, animationCreated, instance) {
        /** @type {?} */
        const animationItem = this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        () => player.loadAnimation(options)));
        awaitConfigAndCache(this.animationCache, options, animationItem);
        // Dispatch `animationCreated` event after animation is loaded successfully
        animationCreated.emit(animationItem);
        eventsFacade.addEventListeners(instance, animationItem);
    }
}
AnimationLoader.decorators = [
    { type: Injectable }
];
/** @nocollapse */
AnimationLoader.ctorParameters = () => [
    { type: NgZone },
    { type: String, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [LOTTIE_OPTIONS,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [ANIMATION_CACHE,] }] }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    AnimationLoader.prototype.player$;
    /**
     * @type {?}
     * @private
     */
    AnimationLoader.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    AnimationLoader.prototype.platformId;
    /**
     * @type {?}
     * @private
     */
    AnimationLoader.prototype.options;
    /**
     * @type {?}
     * @private
     */
    AnimationLoader.prototype.animationCache;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5pbWF0aW9uLWxvYWRlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1sb3R0aWUvIiwic291cmNlcyI6WyJzcmMvYW5pbWF0aW9uLWxvYWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBZ0IsV0FBVyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3RGLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBR25ELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUUzQyxPQUFPLEVBT0wsY0FBYyxFQUNkLGVBQWUsR0FDaEIsTUFBTSxXQUFXLENBQUM7QUFDbkIsT0FBTyxFQUFFLG1CQUFtQixFQUFFLHVCQUF1QixFQUFFLHVCQUF1QixFQUFFLE1BQU0sU0FBUyxDQUFDO0FBTWhHLE1BQU0sT0FBTyxlQUFlOzs7Ozs7O0lBRzFCLFlBQ1UsTUFBYyxFQUNPLFVBQWtCLEVBQ2YsT0FBc0IsRUFDckIsY0FBcUM7UUFIOUQsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUNPLGVBQVUsR0FBVixVQUFVLENBQVE7UUFDZixZQUFPLEdBQVAsT0FBTyxDQUFlO1FBQ3JCLG1CQUFjLEdBQWQsY0FBYyxDQUF1QjtRQU5oRSxZQUFPLEdBQUcsdUJBQXVCLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztJQU81RCxDQUFDOzs7Ozs7Ozs7O0lBRUosNkJBQTZCLENBQzNCLE9BQWdDLEVBQ2hDLFNBQXNCLEVBQ3RCLFlBQWdDLEVBQ2hDLGdCQUE2QyxFQUM3QyxRQUF1QixFQUN2QixRQUF1QjtRQUV2QixJQUFJLGdCQUFnQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsRUFBRTtZQUNyQyxPQUFPO1NBQ1I7UUFFRCxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxTQUFTOzs7O1FBQUMsTUFBTSxDQUFDLEVBQUU7O2tCQUNsRCxhQUFhLEdBQUcsdUJBQXVCLENBQUMsT0FBTyxFQUFFLFNBQVMsRUFBRSxJQUFJLENBQUMsY0FBYyxDQUFDO1lBQ3RGLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxFQUFFLGFBQWEsRUFBRSxZQUFZLEVBQUUsZ0JBQWdCLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDdEYsQ0FBQyxFQUFDLENBQUM7SUFDTCxDQUFDOzs7Ozs7Ozs7O0lBRU8sYUFBYSxDQUNuQixNQUFvQixFQUNwQixPQUEwRCxFQUMxRCxZQUFnQyxFQUNoQyxnQkFBNkMsRUFDN0MsUUFBdUI7O2NBRWpCLGFBQWEsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLGlCQUFpQjs7O1FBQUMsR0FBRyxFQUFFLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsRUFBQztRQUN4RixtQkFBbUIsQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLE9BQU8sRUFBRSxhQUFhLENBQUMsQ0FBQztRQUNqRSwyRUFBMkU7UUFDM0UsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQ3JDLFlBQVksQ0FBQyxpQkFBaUIsQ0FBQyxRQUFRLEVBQUUsYUFBYSxDQUFDLENBQUM7SUFDMUQsQ0FBQzs7O1lBekNGLFVBQVU7Ozs7WUFyQlUsTUFBTTt5Q0EyQnRCLE1BQU0sU0FBQyxXQUFXOzRDQUNsQixNQUFNLFNBQUMsY0FBYzs0Q0FDckIsTUFBTSxTQUFDLGVBQWU7Ozs7Ozs7SUFOekIsa0NBQStEOzs7OztJQUc3RCxpQ0FBc0I7Ozs7O0lBQ3RCLHFDQUErQzs7Ozs7SUFDL0Msa0NBQXNEOzs7OztJQUN0RCx5Q0FBc0UiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBOZ1pvbmUsIEluamVjdCwgRXZlbnRFbWl0dGVyLCBQTEFURk9STV9JRCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgaXNQbGF0Zm9ybVNlcnZlciB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5cbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IHRha2VVbnRpbCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW1wb3J0IHtcbiAgTG90dGllUGxheWVyLFxuICBMb3R0aWVPcHRpb25zLFxuICBBbmltYXRpb25JdGVtLFxuICBBbmltYXRpb25PcHRpb25zLFxuICBBbmltYXRpb25Db25maWdXaXRoRGF0YSxcbiAgQW5pbWF0aW9uQ29uZmlnV2l0aFBhdGgsXG4gIExPVFRJRV9PUFRJT05TLFxuICBBTklNQVRJT05fQ0FDSEUsXG59IGZyb20gJy4vc3ltYm9scyc7XG5pbXBvcnQgeyBhd2FpdENvbmZpZ0FuZENhY2hlLCBtZXJnZU9wdGlvbnNXaXRoRGVmYXVsdCwgc3RyZWFtaWZ5UGxheWVyT3JMb2FkZXIgfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCB7IEJhc2VEaXJlY3RpdmUgfSBmcm9tICcuL2Jhc2UuZGlyZWN0aXZlJztcbmltcG9ydCB7IEFuaW1hdGlvbkNhY2hlIH0gZnJvbSAnLi9hbmltYXRpb24tY2FjaGUnO1xuaW1wb3J0IHsgTG90dGllRXZlbnRzRmFjYWRlIH0gZnJvbSAnLi9ldmVudHMtZmFjYWRlJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEFuaW1hdGlvbkxvYWRlciB7XG4gIHByaXZhdGUgcGxheWVyJCA9IHN0cmVhbWlmeVBsYXllck9yTG9hZGVyKHRoaXMub3B0aW9ucy5wbGF5ZXIpO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgbmdab25lOiBOZ1pvbmUsXG4gICAgQEluamVjdChQTEFURk9STV9JRCkgcHJpdmF0ZSBwbGF0Zm9ybUlkOiBzdHJpbmcsXG4gICAgQEluamVjdChMT1RUSUVfT1BUSU9OUykgcHJpdmF0ZSBvcHRpb25zOiBMb3R0aWVPcHRpb25zLFxuICAgIEBJbmplY3QoQU5JTUFUSU9OX0NBQ0hFKSBwcml2YXRlIGFuaW1hdGlvbkNhY2hlOiBBbmltYXRpb25DYWNoZSB8IG51bGwsXG4gICkge31cblxuICByZXNvbHZlTG9hZGVyQW5kTG9hZEFuaW1hdGlvbihcbiAgICBvcHRpb25zOiBBbmltYXRpb25PcHRpb25zIHwgbnVsbCxcbiAgICBjb250YWluZXI6IEhUTUxFbGVtZW50LFxuICAgIGV2ZW50c0ZhY2FkZTogTG90dGllRXZlbnRzRmFjYWRlLFxuICAgIGFuaW1hdGlvbkNyZWF0ZWQ6IEV2ZW50RW1pdHRlcjxBbmltYXRpb25JdGVtPixcbiAgICBpbnN0YW5jZTogQmFzZURpcmVjdGl2ZSxcbiAgICBkZXN0cm95JDogU3ViamVjdDx2b2lkPixcbiAgKSB7XG4gICAgaWYgKGlzUGxhdGZvcm1TZXJ2ZXIodGhpcy5wbGF0Zm9ybUlkKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMucGxheWVyJC5waXBlKHRha2VVbnRpbChkZXN0cm95JCkpLnN1YnNjcmliZShwbGF5ZXIgPT4ge1xuICAgICAgY29uc3QgbWVyZ2VkT3B0aW9ucyA9IG1lcmdlT3B0aW9uc1dpdGhEZWZhdWx0KG9wdGlvbnMsIGNvbnRhaW5lciwgdGhpcy5hbmltYXRpb25DYWNoZSk7XG4gICAgICB0aGlzLmxvYWRBbmltYXRpb24ocGxheWVyLCBtZXJnZWRPcHRpb25zLCBldmVudHNGYWNhZGUsIGFuaW1hdGlvbkNyZWF0ZWQsIGluc3RhbmNlKTtcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgbG9hZEFuaW1hdGlvbihcbiAgICBwbGF5ZXI6IExvdHRpZVBsYXllcixcbiAgICBvcHRpb25zOiBBbmltYXRpb25Db25maWdXaXRoRGF0YSB8IEFuaW1hdGlvbkNvbmZpZ1dpdGhQYXRoLFxuICAgIGV2ZW50c0ZhY2FkZTogTG90dGllRXZlbnRzRmFjYWRlLFxuICAgIGFuaW1hdGlvbkNyZWF0ZWQ6IEV2ZW50RW1pdHRlcjxBbmltYXRpb25JdGVtPixcbiAgICBpbnN0YW5jZTogQmFzZURpcmVjdGl2ZSxcbiAgKTogdm9pZCB7XG4gICAgY29uc3QgYW5pbWF0aW9uSXRlbSA9IHRoaXMubmdab25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHBsYXllci5sb2FkQW5pbWF0aW9uKG9wdGlvbnMpKTtcbiAgICBhd2FpdENvbmZpZ0FuZENhY2hlKHRoaXMuYW5pbWF0aW9uQ2FjaGUsIG9wdGlvbnMsIGFuaW1hdGlvbkl0ZW0pO1xuICAgIC8vIERpc3BhdGNoIGBhbmltYXRpb25DcmVhdGVkYCBldmVudCBhZnRlciBhbmltYXRpb24gaXMgbG9hZGVkIHN1Y2Nlc3NmdWxseVxuICAgIGFuaW1hdGlvbkNyZWF0ZWQuZW1pdChhbmltYXRpb25JdGVtKTtcbiAgICBldmVudHNGYWNhZGUuYWRkRXZlbnRMaXN0ZW5lcnMoaW5zdGFuY2UsIGFuaW1hdGlvbkl0ZW0pO1xuICB9XG59XG4iXX0=